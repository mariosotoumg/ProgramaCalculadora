/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package calculadora;

import javax.swing.JOptionPane;

/**
 * Programa que muestra una calculadora con funciones avanzadas medias
 * @author Mario Soto
 */
public class mcalc extends javax.swing.JFrame {

    /**
     * Primer operando en operaciones de 2 operandos
     */
    public float num;

    /**
     * Bandera para limpiar contenido de pantalla cuando se presiona un siguiente número
     */
    public int limpiar;

    /**
     * Código de la operación a realizar cuando la operación tiene mas de un operando
     */
    public int operacion;

    /**
     * Crea el formulario de la calculadora e inicializa valores
     */
    public mcalc() {
        initComponents();
        this.num       = 0;
        this.operacion = 0;
        this.limpiar   = 0;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pantalla = new javax.swing.JTextField();
        b1 = new javax.swing.JButton();
        b2 = new javax.swing.JButton();
        b3 = new javax.swing.JButton();
        b4 = new javax.swing.JButton();
        b5 = new javax.swing.JButton();
        b7 = new javax.swing.JButton();
        b6 = new javax.swing.JButton();
        b8 = new javax.swing.JButton();
        b9 = new javax.swing.JButton();
        b0 = new javax.swing.JButton();
        bSuma = new javax.swing.JButton();
        bResta = new javax.swing.JButton();
        bMultiplicacion = new javax.swing.JButton();
        bDivision = new javax.swing.JButton();
        bIgual = new javax.swing.JButton();
        bCE = new javax.swing.JButton();
        bBorrar = new javax.swing.JButton();
        bC = new javax.swing.JButton();
        bPorciento = new javax.swing.JButton();
        bRaiz = new javax.swing.JButton();
        bCuadrado = new javax.swing.JButton();
        bInverso = new javax.swing.JButton();
        bSigno = new javax.swing.JButton();
        bPunto = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        pantalla.setEditable(false);
        pantalla.setBackground(new java.awt.Color(255, 255, 255));
        pantalla.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        pantalla.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        b1.setText("1");
        b1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b1ActionPerformed(evt);
            }
        });

        b2.setText("2");
        b2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b2ActionPerformed(evt);
            }
        });

        b3.setText("3");
        b3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b3ActionPerformed(evt);
            }
        });

        b4.setText("4");
        b4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b4ActionPerformed(evt);
            }
        });

        b5.setText("5");
        b5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b5ActionPerformed(evt);
            }
        });

        b7.setText("7");
        b7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b7ActionPerformed(evt);
            }
        });

        b6.setText("6");
        b6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b6ActionPerformed(evt);
            }
        });

        b8.setText("8");
        b8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b8ActionPerformed(evt);
            }
        });

        b9.setText("9");
        b9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b9ActionPerformed(evt);
            }
        });

        b0.setText("0");
        b0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b0ActionPerformed(evt);
            }
        });

        bSuma.setText("+");
        bSuma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSumaActionPerformed(evt);
            }
        });

        bResta.setText("-");
        bResta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRestaActionPerformed(evt);
            }
        });

        bMultiplicacion.setText("x");
        bMultiplicacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bMultiplicacionActionPerformed(evt);
            }
        });

        bDivision.setText("÷");
        bDivision.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDivisionActionPerformed(evt);
            }
        });

        bIgual.setText("=");
        bIgual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bIgualActionPerformed(evt);
            }
        });

        bCE.setLabel("CE");
        bCE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCEActionPerformed(evt);
            }
        });

        bBorrar.setLabel("<");
        bBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bBorrarActionPerformed(evt);
            }
        });

        bC.setLabel("C");
        bC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCActionPerformed(evt);
            }
        });

        bPorciento.setLabel("%");
        bPorciento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bPorcientoActionPerformed(evt);
            }
        });

        bRaiz.setLabel("√");
        bRaiz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRaizActionPerformed(evt);
            }
        });

        bCuadrado.setLabel("x²");
        bCuadrado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCuadradoActionPerformed(evt);
            }
        });

        bInverso.setLabel("i");
        bInverso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bInversoActionPerformed(evt);
            }
        });

        bSigno.setAutoscrolls(true);
        bSigno.setLabel("±");
        bSigno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSignoActionPerformed(evt);
            }
        });

        bPunto.setText(".");
        bPunto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bPuntoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(b4, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(b5, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(b6, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bResta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(b7, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bSigno, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(b8, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                            .addComponent(b0, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(b9, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bSuma, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(bPunto, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bIgual, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bPorciento, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bRaiz, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bCuadrado, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bInverso, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(bCE, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bC, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bBorrar, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(b1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(bDivision, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bMultiplicacion, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(pantalla))
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(pantalla, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bPorciento)
                    .addComponent(bInverso)
                    .addComponent(bCuadrado)
                    .addComponent(bRaiz))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bCE)
                    .addComponent(bBorrar)
                    .addComponent(bC)
                    .addComponent(bDivision))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(b1)
                    .addComponent(b2)
                    .addComponent(b3)
                    .addComponent(bMultiplicacion))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(b4)
                    .addComponent(b5)
                    .addComponent(b6)
                    .addComponent(bResta))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(b7)
                    .addComponent(b8)
                    .addComponent(b9)
                    .addComponent(bSuma))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(b0)
                    .addComponent(bIgual)
                    .addComponent(bSigno)
                    .addComponent(bPunto))
                .addGap(12, 12, 12))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Verifica y limpia la pantalla de la calculadora si se ingresó una operación que requiere un segundo operando
     */
    private void verificarLimpiar(){
        if(this.limpiar == 1){
            this.limpiar = 0;
            pantalla.setText("");
        }
    }

    /**
     * Realiza operaciones básicas, e iguala al contenido de la pantalla sin operación
     *   - suma
     *   - resta
     *   - multiplicación
     *   - división
     * @param percent Variable que indica si se ha de tomar como porcentaje el segundo operando
     */
    private void operar(int percent){
        String  p_ = pantalla.getText(); // Obtiene el valor de la pantalla
        Float p = new Float(0.0);       // Inicializa el segundo operando
        if(p_.length() > 0){            // Si la pantalla no está vacía
            p = Float.parseFloat(p_);   // Convierte el número si hay contenido en la pantalla
            if(percent == 1) {          // Aplica el porcentaje
                p /= 100;
            }
        }
        switch (this.operacion){        // Realiza las operaciones básicas
            case 1: // suma
                this.num += p;
                break;
            case 2: // resta
                this.num -= p;
                break;
            case 3: // multiplicación
                this.num *= p;
                break;
            case 4: // división
                if(p != 0) { // Si no se divide entre cero
                    this.num /= p;
                } else {
                    JOptionPane.showMessageDialog(rootPane, "No se puede realizar la operación", "Error", JOptionPane.WARNING_MESSAGE);
                }
                break;
            default: // igual
                this.num = p;
        }
        pantalla.setText(String.valueOf(this.num));
        this.num       = 0; // Limpia el primer operando
        this.operacion = 0; // No hay operación, ya se realizó
    }

    /**
     * Tecla 1
     * @param evt Evento
     */
    private void b1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b1ActionPerformed
        this.verificarLimpiar();
        pantalla.setText(pantalla.getText()+"1");
    }//GEN-LAST:event_b1ActionPerformed

    /**
     * Tecla 2
     * @param evt Evento
     */
    private void b2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b2ActionPerformed
        this.verificarLimpiar();
        pantalla.setText(pantalla.getText()+"2");
    }//GEN-LAST:event_b2ActionPerformed

    /**
     * Tecla 3
     * @param evt Evento
     */
    private void b3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b3ActionPerformed
        this.verificarLimpiar();
        pantalla.setText(pantalla.getText()+"3");
    }//GEN-LAST:event_b3ActionPerformed

    /**
     * Tecla 4
     * @param evt Evento
     */
    private void b4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b4ActionPerformed
        this.verificarLimpiar();
        pantalla.setText(pantalla.getText()+"4");
    }//GEN-LAST:event_b4ActionPerformed

    /**
     * Tecla 5
     * @param evt Evento
     */
    private void b5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b5ActionPerformed
        this.verificarLimpiar();
        pantalla.setText(pantalla.getText()+"5");
    }//GEN-LAST:event_b5ActionPerformed

    /**
     * Tecla 6
     * @param evt Evento
     */
    private void b6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b6ActionPerformed
        this.verificarLimpiar();
        pantalla.setText(pantalla.getText()+"6");
    }//GEN-LAST:event_b6ActionPerformed

    /**
     * Tecla 7
     * @param evt Evento
     */
    private void b7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b7ActionPerformed
        this.verificarLimpiar();
        pantalla.setText(pantalla.getText()+"7");
    }//GEN-LAST:event_b7ActionPerformed

    /**
     * Tecla 8
     * @param evt Evento
     */
    private void b8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b8ActionPerformed
        this.verificarLimpiar();
        pantalla.setText(pantalla.getText()+"8");
    }//GEN-LAST:event_b8ActionPerformed

    /**
     * Tecla 9
     * @param evt Evento
     */
    private void b9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b9ActionPerformed
        this.verificarLimpiar();
        pantalla.setText(pantalla.getText()+"9");
    }//GEN-LAST:event_b9ActionPerformed

    /**
     * Tecla 0
     * @param evt Evento
     */
    private void b0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b0ActionPerformed
        this.verificarLimpiar();
        pantalla.setText(pantalla.getText()+"0");
    }//GEN-LAST:event_b0ActionPerformed

    /**
     * Identifica que la operación a realizar será suma
     * - guarda el primer operando
     * - bandera de limpieza de pantalla al siguiente número ingresado
     * @param evt Evento
     */
    private void bSumaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSumaActionPerformed
        this.operacion = 1; // Suma
        this.num = Float.parseFloat(pantalla.getText());
        this.limpiar = 1;
    }//GEN-LAST:event_bSumaActionPerformed

    /**
     * Identifica que la operación a realizar será resta
     * - guarda el primer operando
     * - bandera de limpieza de pantalla al siguiente número ingresado
     * @param evt Evento
     */
    private void bRestaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRestaActionPerformed
        this.operacion = 2; // Resta
        this.num = Float.parseFloat(pantalla.getText());
        this.limpiar = 1;
    }//GEN-LAST:event_bRestaActionPerformed

    /**
     * Identifica que la operación a realizar será multiplcación
     * - guarda el primer operando
     * - bandera de limpieza de pantalla al siguiente número ingresado
     * @param evt Evento
     */
    private void bMultiplicacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bMultiplicacionActionPerformed
        this.operacion = 3; // Multiplicacion
        this.num = Float.parseFloat(pantalla.getText());
        this.limpiar = 1;
    }//GEN-LAST:event_bMultiplicacionActionPerformed

    /**
     * Identifica que la operación a realizar será división
     * - guarda el primer operando
     * - bandera de limpieza de pantalla al siguiente número ingresado
     * @param evt Evento
     */
    private void bDivisionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDivisionActionPerformed
        this.operacion = 4; // Division
        this.num = Float.parseFloat(pantalla.getText());
        this.limpiar = 1;
    }//GEN-LAST:event_bDivisionActionPerformed

    /**
     * Ejecuta el proceso para realizar la operación de 2 operandos.
     * No aplica el valor de porcentaje al segundo operando
     * @param evt Evento
     */
    private void bIgualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bIgualActionPerformed
        this.operar(0);
    }//GEN-LAST:event_bIgualActionPerformed

    /**
     * Limpia operandos, operaciones y pantalla
     * @param evt Evento
     */
    private void bCEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCEActionPerformed
        this.num       = 0;
        this.operacion = 0;
        this.limpiar   = 1;
        this.verificarLimpiar();
    }//GEN-LAST:event_bCEActionPerformed

    /**
     * Elimina el caracter mas a la derecha
     * @param evt Evento
     */
    private void bBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bBorrarActionPerformed
        String p = pantalla.getText();
        if(p.length() > 0){
            pantalla.setText(p.substring(0,p.length()-1));
        }
    }//GEN-LAST:event_bBorrarActionPerformed

    /**
     * Limpia la pantalla
     * @param evt Evento
     */
    private void bCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCActionPerformed
        this.limpiar = 1;
        this.verificarLimpiar();
    }//GEN-LAST:event_bCActionPerformed

    /**
     * Ejecuta el proceso para realizar la operación de 2 operandos.
     * Aplica el valor de porcentaje al segundo operando
     * @param evt Evento
     */
    private void bPorcientoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bPorcientoActionPerformed
        this.operar(1);
    }//GEN-LAST:event_bPorcientoActionPerformed

    /**
     * Realiza la operación de raiz cuadrada sobre el valor de la pantalla
     * @param evt Evento
     */
    private void bRaizActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRaizActionPerformed
        Float p = Float.parseFloat(pantalla.getText());
        if(p > 0){
            pantalla.setText(String.valueOf(Math.sqrt(p)));
        } else {
            JOptionPane.showMessageDialog(rootPane, "No se puede realizar la operación", "Error", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_bRaizActionPerformed

    /**
     * Realiza la operación de elevar al cuadrado el valor de la pantalla
     * @param evt Evento
     */
    private void bCuadradoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCuadradoActionPerformed
        pantalla.setText(String.valueOf(Math.pow(Double.parseDouble(pantalla.getText()),(double) 2)));
    }//GEN-LAST:event_bCuadradoActionPerformed

    /**
     * Realiza la operación de número inverso (1/x) el valor de la pantalla
     * @param evt Evento
     */
    private void bInversoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bInversoActionPerformed
        Float p = Float.parseFloat(pantalla.getText());
        if(p > 0){
            pantalla.setText(String.valueOf(1/p));
        } else {
            JOptionPane.showMessageDialog(rootPane, "No se puede realizar la operación", "Error", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_bInversoActionPerformed

    /**
     * Cambia el signo del valor mostrado en la pantalla
     * @param evt Evento
     */
    private void bSignoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSignoActionPerformed
        String p = pantalla.getText();
        if(p.length() > 0){
            String primero = p.substring(0,1);
            if(primero.equals("-")){
                pantalla.setText(p.substring(1,p.length()));
            }else{
                pantalla.setText("-"+p);
            }
        }
    }//GEN-LAST:event_bSignoActionPerformed

    /**
     * Agrega un punto decimal al número en pantalla. Revisa que no existan puntos.
     * @param evt Evento
     */
    private void bPuntoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bPuntoActionPerformed
        String p = pantalla.getText();
        if(!p.contains(".")){
            pantalla.setText(pantalla.getText()+".");
        }
    }//GEN-LAST:event_bPuntoActionPerformed

    /**
     * Función main
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mcalc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mcalc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mcalc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mcalc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mcalc().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton b0;
    private javax.swing.JButton b1;
    private javax.swing.JButton b2;
    private javax.swing.JButton b3;
    private javax.swing.JButton b4;
    private javax.swing.JButton b5;
    private javax.swing.JButton b6;
    private javax.swing.JButton b7;
    private javax.swing.JButton b8;
    private javax.swing.JButton b9;
    private javax.swing.JButton bBorrar;
    private javax.swing.JButton bC;
    private javax.swing.JButton bCE;
    private javax.swing.JButton bCuadrado;
    private javax.swing.JButton bDivision;
    private javax.swing.JButton bIgual;
    private javax.swing.JButton bInverso;
    private javax.swing.JButton bMultiplicacion;
    private javax.swing.JButton bPorciento;
    private javax.swing.JButton bPunto;
    private javax.swing.JButton bRaiz;
    private javax.swing.JButton bResta;
    private javax.swing.JButton bSigno;
    private javax.swing.JButton bSuma;
    private javax.swing.JTextField pantalla;
    // End of variables declaration//GEN-END:variables
}
